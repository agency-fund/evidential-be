name: tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Relax hostname checks.
  ALLOW_CONNECTING_TO_PRIVATE_IPS: "1"

  DEBIAN_FRONTEND: noninteractive
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

  # Tests should never connect to this DSN but it must be set.
  DATABASE_URL: "postgresql://fail:fail@127.0.0.2:5499/fail"

  # Server startup will fail without these values being set.
  GOOGLE_OIDC_CLIENT_ID: "unset-google-oidc-client-id"
  GOOGLE_OIDC_CLIENT_SECRET: "unset-google-oidc-client-secret"
jobs:

  changes:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: read
    outputs:
      pydependencies: ${{ steps.filter.outputs.pydependencies }}
      queries: ${{ steps.filter.outputs.queries }}
    steps:
      - if: github.event_name != 'pull_request'
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: |
            pydependencies:
              - 'pyproject.toml'
              - 'uv.lock'
            queries:
              - 'src/xngin/apiserver/dwh/**'
              - 'src/xngin/apiserver/conftest.py'


  osx-setup:
    needs: changes
    if: ${{ needs.changes.outputs.pydependencies == 'true' }}
    timeout-minutes: 15
    runs-on: macos-14
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      - name: Install dependencies
        run: |
          uv sync --locked --compile-bytecode

  unittests:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          lfs: true
          persist-credentials: true
      - uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      - uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: write secrets
        run: |
          mkdir -p ~/.config && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > ~/.config/service_account.json
          openssl sha256 ~/.config/service_account.json
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
      - run: task test-coverage
        env:
          DATABASE_URL: "postgresql+psycopg://postgres:postgres@localhost:5499/test_xngin?sslmode=disable"
      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@91aaf3b39c7e2331c6bc77767ce017f5160c5f11 # v3.38
        with:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
      - name: integration tests
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/service_account.json
          task test-integration

  smoke-cli:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          lfs: true
          persist-credentials: false
      - uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: xngin-cli export-openapi-spec
        run: |
          XNGIN_PUBLISH_ALL_DOCS=true uv run xngin-cli export-openapi-spec
      - name: xngin-cli config validators
        run: |
          set -x
          uv run xngin-cli --help
          uv run xngin-cli export-json-schemas
          uv run xngin-cli validate-testing-settings ./src/xngin/apiserver/testdata/xngin.testing.settings.json
          uv run xngin-cli validate-testing-settings ./src/xngin/apiserver/testdata/xngin.gha.settings.json
      - name: xngin-cli smoke tests
        env:
          DATABASE_URL: "postgresql+psycopg://postgres:postgres@localhost:5499/postgres?sslmode=disable"
          PGPASSWORD: postgres
        run: |
          # These imports correspond to entries in xngin.gha.settings.json.
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres \
            --schema-name alt --table-name=alt_table

          # These do the same thing as above but use psycopg2 driver to ensure that it still works.
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg2://postgres@127.0.0.1:5499/postgres
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg2://postgres@127.0.0.1:5499/postgres \
            --schema-name alt2 --table-name=alt_table2

          # Create the application database.
          uv run xngin-cli create-apiserver-db

  bq-integration:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    needs: changes
    if: needs.changes.outputs.queries == 'true'
    env:
      DWH_DATASET_NAME: bqintegration_${{ github.run_id }}_${{ github.run_attempt }}_dwh
      QUERIES_DATASET_NAME: bqintegration_${{ github.run_id }}_${{ github.run_attempt }}_q
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          lfs: true
          persist-credentials: false
      - uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      - run: uv sync --locked
      - uses: google-github-actions/auth@c200f3691d83b41bf9bbd8638997a462592937ed # v2.1.13
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}'
      - uses: google-github-actions/setup-gcloud@e427ad8a34f8676edf47cf7d7925499adf3eb74f # v2.2.1
        with:
          project_id: "xngin-development-dc"
          install_components: "bq"
      - name: cli populates testing dwh in BigQuery
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          bq --location=us-west1 mk --dataset --default_table_expiration=86400 \
            xngin-development-dc:"${DWH_DATASET_NAME}"

          # Verify that we can populate a testing data warehouse in BigQuery.
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/service_account.json
          mkdir -p ~/.config && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > ~/.config/service_account.json
          uv run xngin-cli create-testing-dwh --dsn bigquery://xngin-development-dc/"${DWH_DATASET_NAME}" --nrows 10
      - name: dwh queries unit test
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          bq --location=us-west1 mk --dataset --default_table_expiration=86400 \
            xngin-development-dc:"${QUERIES_DATASET_NAME}"

          CREDENTIALS=credentials_base64=$(echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" | base64 -w 0)
          # Verify that the query generation unit tests pass when run on BigQuery.
          export XNGIN_QUERIES_TEST_URI="bigquery://xngin-development-dc/${QUERIES_DATASET_NAME}?${CREDENTIALS}"
          export DATABASE_URL="postgresql+psycopg://postgres:postgres@localhost:5499/test_xngin?sslmode=disable"
          uv run pytest -v -rA src/xngin/apiserver/dwh/test_queries.py
      - name: bq cleanup
        if: failure() || success()
        run: |
          for ds in "${DWH_DATASET_NAME}" "${QUERIES_DATASET_NAME}"; do
            uv run xngin-cli bigquery-dataset-delete \
              --project-id xngin-development-dc \
              --dataset-id "${ds}" \
              || /bin/true
          done

  docker-builds:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - run: docker buildx bake
