name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      run-bq-integration:
        type: boolean
        required: false
        default: false
        description: "Run the BQ integration tests"


permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Relax hostname checks.
  ALLOW_CONNECTING_TO_PRIVATE_IPS: "1"

  DEBIAN_FRONTEND: noninteractive
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

  # Tests should never connect to this DSN but it (or XNGIN_DB) must be set.
  DATABASE_URL: "postgresql://fail:fail@127.0.0.2:5499/fail"

jobs:
  osx-setup:
    timeout-minutes: 15
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.6.14"
          enable-cache: true
      - name: Install dependencies
        run: |
          uv sync --locked --compile-bytecode
  unittests:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.6.14"
          enable-cache: true
      - uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: write secrets
        run: |
          mkdir -p ~/.config/gspread && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > ~/.config/gspread/service_account.json
          openssl sha256 ~/.config/gspread/service_account.json
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
      - run: task test
      - name: integration tests
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gspread/service_account.json
          task test-integration
  smoke-cli:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.6.14"
          enable-cache: true
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: xngin-cli config validators
        run: |
          set -x
          uv run xngin-cli --help
          uv run xngin-cli export-json-schemas
          uv run xngin-cli validate-settings ./src/xngin/apiserver/testdata/xngin.testing.settings.json
          uv run xngin-cli validate-settings ./src/xngin/apiserver/testdata/xngin.gha.settings.json
          uv run xngin-cli validate-settings xngin.settings.json
      - name: xngin-cli smoke tests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5499/postgres?sslmode=disable"
        run: |
          set -x

          # import/export lifecycle
          uv run xngin-cli create-testing-dwh --dsn $DATABASE_URL --table-name=test_participant_type
          # First bootstrap just tests --unique-id-col (although the column itself isn't unique)
          uv run xngin-cli bootstrap-spreadsheet $DATABASE_URL test_participant_type --unique-id-col potential_1 | tee config-unique.csv
          uv run xngin-cli parse-config-spreadsheet file://./config-unique.csv test_participant_type
          # This next bootstrap is a more appropriate testing config
          uv run xngin-cli bootstrap-spreadsheet $DATABASE_URL test_participant_type | tee config.csv
          uv run xngin-cli parse-config-spreadsheet file://./config.csv test_participant_type
      - name: Run xngin.gha.settings.json tests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5499/postgres?sslmode=disable"
          PGPASSWORD: postgres
        run: |
          set -x

          # These imports correspond to entries in xngin.gha.settings.json.
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres \
            --schema-name alt --table-name=alt_table

          # These do the same thing as above but use psycopg2 driver to ensure that it still works.
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg2://postgres@127.0.0.1:5499/postgres
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg2://postgres@127.0.0.1:5499/postgres \
            --schema-name alt2 --table-name=alt_table2

          # Verify the sources in xngin.gha.settings.json are still readable (uses the psycopg imports).
          XNGIN_SETTINGS=src/xngin/apiserver/testdata/xngin.gha.settings.json uv run fastapi run \
            src/xngin/apiserver/main.py &
          sleep 10
          curl -v --fail-with-body http://localhost:8000/v1/_settings
          # Verify we can get data from a table in the default schema
          curl -v --fail-with-body -H "Datasource-ID: gha-postgres" 'http://localhost:8000/v1/filters?participant_type=dwh'
          # Now verify search_path can override defaults
          curl -v --fail-with-body -H "Datasource-ID: gha-postgres-alt" 'http://localhost:8000/v1/filters?participant_type=alt'
          kill %1
  bq-integration:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    if: contains(github.event.pull_request.body, 'run:bqintegration') || inputs.run-bq-integration
    env:
      DATASET_NAME: bqintegration_${{ github.run_id }}_${{ github.run_attempt }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.6.14"
          enable-cache: true
      - run: uv sync --locked
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: "xngin-development-dc"
          install_components: "bq"
      - name: bq integration tests
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          bq --location=us-west1 mk --dataset --default_table_expiration=86400 xngin-development-dc:$DATASET_NAME

          export ECHO_SQL="1"
          mkdir -p ~/.config/gspread && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > ~/.config/gspread/service_account.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gspread/service_account.json
          export XNGIN_TEST_DWH_URI="bigquery://xngin-development-dc/${DATASET_NAME}?credentials_base64=$(cat ${GOOGLE_APPLICATION_CREDENTIALS} | base64 -w 0)"
          uv run pytest -rA src/xngin/apiserver/dwh/test_queries.py
      - name: bq cleanup
        if: failure() || success()
        run: |
          uv run xngin-cli bigquery-dataset-delete \
            --project-id xngin-development-dc \
            --dataset-id ${DATASET_NAME} \
            || /bin/true
  docker-builds:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: docker buildx bake

  smoke-server-bq:
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5499/postgres?sslmode=disable"
      XNGIN_CLI_TABLE_NAME: smoke_${{ github.run_id }}_${{ github.run_attempt }}
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.6.14"
          enable-cache: true
      - run: uv sync --locked
      - name: write secrets
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          mkdir -p ~/.config/gspread && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > service_account.json
          openssl sha256 service_account.json
      - name: bq smoke tests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5499/postgres?sslmode=disable"
        run: |
          set -x

          # Authenticate with environment variable because the CLI doesn't support
          # specifying credentials explicitly.
          export GOOGLE_APPLICATION_CREDENTIALS=service_account.json

          # Populate the test warehouse. This is read by the two CLI commands and the server we start below.
          uv run xngin-cli create-testing-dwh --dsn bigquery://xngin-development-dc/ds --nrows 1000

          # The outputs of bootstrap-spreadsheet and parse-config-spreadsheet aren't actually used by the HTTP test
          # below. We run them to ensure that the commands can interact with BigQuery without failing.
          uv run xngin-cli bootstrap-spreadsheet bigquery://xngin-development-dc/ds | tee config.csv
          uv run xngin-cli parse-config-spreadsheet file://./config.csv "$XNGIN_CLI_TABLE_NAME"

          # Unset the environment variable because we want to ensure the server is authenticating with the credentials
          # configured in the settings file and not relying on fallback behavior.
          unset GOOGLE_APPLICATION_CREDENTIALS

          # Start a server using the gha-bq profile.
          XNGIN_SETTINGS=src/xngin/apiserver/testdata/xngin.gha.settings.json uv run fastapi run \
            src/xngin/apiserver/main.py &
          sleep 10
          curl -v --fail-with-body http://localhost:8000/v1/_settings
          curl -v --fail-with-body -H "Datasource-ID: gha-bq" 'http://localhost:8000/v1/filters?participant_type=warehouse'
          curl -v --fail-with-body \
            -H "Datasource-ID: gha-bq" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -X POST "http://localhost:8000/v1/assign?chosen_n=40&random_state=42" \
            -d '{
              "design_spec": {
                "experiment_id": "0897bbd7-dacd-41b4-b164-7a1950fa61f2",
                "experiment_type": "preassigned",
                "experiment_name": "Sample experiment name.",
                "description": "Sample experiment description.",
                "arms": [
                  {
                    "arm_name": "Control",
                    "arm_id": "699a500b-41d6-4cba-b254-60b9493717cb"
                  },
                  {
                    "arm_name": "Treatment",
                    "arm_id": "5bc829fb-ffa6-456c-9e54-d26ba8d1031d"
                  }
                ],
                "start_date": "2024-11-06",
                "end_date": "2024-11-20",
                "strata_field_names": [
                  "is_onboarded"
                ],
                "power": 0.8,
                "alpha": 0.05,
                "fstat_thresh": 0.5,
                "metrics": [
                  {
                    "field_name": "current_income",
                    "metric_pct_change": 0.1
                  }
                ]
              },
              "audience_spec": {
                "participant_type": "warehouse",
                "filters": []
              }
            }'
          kill %1
      - name: bq cleanup
        if: success() || failure()
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=service_account.json
          uv run xngin-cli bigquery-table-delete \
            --project-id xngin-development-dc \
            --dataset-id ds \
            --table-id ${XNGIN_CLI_TABLE_NAME} || /bin/true
