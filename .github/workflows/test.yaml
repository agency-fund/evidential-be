name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEBIAN_FRONTEND: noninteractive
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  unittests:
    timeout-minutes: 15
    name: Python on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.5"
          enable-cache: true
      - if: startsWith(matrix.os, 'macos-')
        run: |
          # Install postgres so that the Python psycopg2 module can build from source.
          brew install postgresql@14
      - name: Install dependencies
        run: |
          uv sync --locked
      - name: pytest unit tests
        run: uv run pytest
      - name: write secrets
        # The secret is only needed by the integration test
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          mkdir -p ~/.config/gspread && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > ~/.config/gspread/service_account.json
          openssl sha256 ~/.config/gspread/service_account.json
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
      - name: pytest integration tests
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          set -x
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends retry
          retry -t 3 -d 30 -- uv run pytest -m integration
  unittests-in-docker:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t xngin .
      - run: docker run --rm xngin uv run pytest
  smoke-cli:
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.5"
          enable-cache: true
      - name: xngin-cli smoke tests
        env:
          PGPASSWORD: postgres
        run: |
          set -x
          uv run xngin-cli --help
          uv run xngin-cli export-json-schemas
          uv run xngin-cli validate-settings ./src/xngin/apiserver/testdata/xngin.testing.settings.json
          uv run xngin-cli validate-settings ./src/xngin/apiserver/testdata/xngin.gha.settings.json
          uv run xngin-cli validate-settings xngin.settings.json

          # import/export lifecycle
          uv run xngin-cli create-testing-dwh --dsn sqlite:///smoke.db --table-name=test_participant_type
          uv run xngin-cli bootstrap-spreadsheet sqlite:///smoke.db test_participant_type | tee config.csv
          uv run xngin-cli parse-config-spreadsheet file://./config.csv test_participant_type

          # Verify create-testing-dwh executes against default Postgres driver and psycopg2 driver.
          uv run xngin-cli create-testing-dwh --dsn postgresql://postgres@127.0.0.1:5499/postgres --nrows 100
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg2://postgres@127.0.0.1:5499/postgres --schema-name alt --table-name=alt_table --nrows 100
  smoke-server-bq:
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.5"
          enable-cache: true
      - run: uv sync --locked
      - name: write secrets
        env:
          GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          mkdir -p ~/.config/gspread && echo "${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}" > service_account.json
          openssl sha256 service_account.json
      - env:
          XNGIN_CLI_TABLE_NAME: gha_{{ github.run_id }}_${{ github.run_attempt }}
        run: |
          set -x

          # Authenticate with environment variable because the CLI doesn't support
          # specifying credentials explicitly.
          export GOOGLE_APPLICATION_CREDENTIALS=service_account.json

          # Populate the test warehouse. This is read by the two CLI commands and the server we start below.
          uv run xngin-cli create-testing-dwh --dsn bigquery://xngin-development-dc/ds --nrows 1000

          # The outputs of bootstrap-spreadsheet and parse-config-spreadsheet aren't actually used by the HTTP test
          # below. We run them to ensure that the commands can interact with BigQuery without failing.
          uv run xngin-cli bootstrap-spreadsheet bigquery://xngin-development-dc/ds | tee config.csv
          uv run xngin-cli parse-config-spreadsheet file://./config.csv "$XNGIN_CLI_TABLE_NAME"

          # Unset the environment variable because we want to ensure the server is authenticating with the credentials
          # configured in the settings file and not relying on fallback behavior.
          unset GOOGLE_APPLICATION_CREDENTIALS

          # Start a server using the gha-bq profile.
          XNGIN_SETTINGS=src/xngin/apiserver/testdata/xngin.gha.settings.json uv run fastapi dev \
            src/xngin/apiserver/main.py &
          sleep 10
          curl -fv http://localhost:8000/_settings
          curl -fv -H "Config-ID: gha-bq" 'http://localhost:8000/filters?participant_type=warehouse'
          kill %1
  smoke-server:
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5499:5432
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          version: "0.5.5"
          enable-cache: true
      - run: uv sync --locked
      - env:
          PGPASSWORD: postgres
        run: |
          set -x
          # These imports correspond to entries in xngin.gha.settings.json.
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres
          uv run xngin-cli create-testing-dwh --dsn postgresql+psycopg://postgres@127.0.0.1:5499/postgres \
            --schema-name alt --table-name=alt_table

          XNGIN_SETTINGS=src/xngin/apiserver/testdata/xngin.gha.settings.json uv run fastapi dev \
            src/xngin/apiserver/main.py &
          sleep 10
          curl -fv http://localhost:8000/_settings
          # Verify we can get data from a table in the default schema
          curl -fv -H "Config-ID: gha-postgres" 'http://localhost:8000/filters?participant_type=dwh'
          # Now verify search_path can override defaults
          curl -fv -H "Config-ID: gha-postgres-alt" 'http://localhost:8000/filters?participant_type=alt'
          kill %1
