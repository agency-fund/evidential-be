"""Implements a basic Google OIDC RP."""

import os
from contextlib import asynccontextmanager
from typing import Annotated

import httpx
from fastapi import APIRouter, Depends, FastAPI, HTTPException, Query
from loguru import logger
from pydantic import BaseModel, Field
from xngin.apiserver import constants, flags
from xngin.apiserver.routers.oidc_dependencies import (
    ENV_GOOGLE_OIDC_CLIENT_ID,
    ENV_GOOGLE_OIDC_CLIENT_SECRET,
    get_google_configuration,
    CLIENT_ID,
    CLIENT_SECRET,
)

ENV_GOOGLE_OIDC_REDIRECT_URI = "GOOGLE_OIDC_REDIRECT_URI"

DEFAULT_REDIRECT_URI = f"http://localhost:8000{constants.API_PREFIX_V1}/a/oidc"
REDIRECT_URI = os.environ.get(
    ENV_GOOGLE_OIDC_REDIRECT_URI, DEFAULT_REDIRECT_URI
)  # used for testing UI only


class OidcMisconfiguredError(Exception):
    pass


def is_enabled():
    """Feature flag: Returns true iff OIDC is enabled."""
    enabled = flags.ENABLE_OIDC
    if enabled:
        if not CLIENT_ID:
            raise OidcMisconfiguredError(
                f"{ENV_GOOGLE_OIDC_CLIENT_ID} environment variable is not set."
            )
        if not os.environ.get(ENV_GOOGLE_OIDC_CLIENT_SECRET):
            logger.warning(
                f"{ENV_GOOGLE_OIDC_CLIENT_SECRET} environment variable is not set."
            )
    return enabled


@asynccontextmanager
async def lifespan(_app: FastAPI):
    yield


router = APIRouter(
    lifespan=lifespan,
    prefix="/a/oidc",
)


class CallbackResponse(BaseModel):
    """The credentials returned to the SPA."""

    id_token: Annotated[
        str,
        Field(
            ...,
            description="The ID token as generated by Google. Represents a successful authentication.",
        ),
    ]


@router.get("/callback")
async def auth_callback(
    code: Annotated[str, Query(...)],
    code_verifier: Annotated[
        str, Query(min_length=43, max_length=128, pattern=r"^[A-Za-z0-9._~-]+$")
    ],
    oidc_config: Annotated[dict, Depends(get_google_configuration)],
) -> CallbackResponse:
    """OAuth callback endpoint that exchanges the authorization code for tokens, and returns the id_token to the client.

    Only relevant for PKCE.
    """
    async with httpx.AsyncClient() as client:
        token_endpoint = oidc_config["token_endpoint"]
        token_response = await client.post(
            token_endpoint,
            data={
                "client_id": CLIENT_ID,
                # client_secret is not strictly required by PKCE spec but Google requires it.
                "client_secret": CLIENT_SECRET,
                "code": code,
                "code_verifier": code_verifier,
                "redirect_uri": REDIRECT_URI,
                "grant_type": "authorization_code",
            },
        )
        token_response.raise_for_status()
        response = token_response.json()
        if not isinstance(response, dict) or response.get("id_token") is None:
            raise HTTPException(
                status_code=500, detail=f"Unexpected response from {token_endpoint}"
            )
        return CallbackResponse(id_token=response.get("id_token"))
