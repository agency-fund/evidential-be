"""Unit test for gsheet_cache. This was generated by Claude (mostly)."""

import pytest
from unittest.mock import Mock
from sqlalchemy import Update
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError

from xngin.apiserver import conftest
from xngin.apiserver.api_types import DataType
from xngin.apiserver.models.tables import CacheTable
from xngin.apiserver.gsheet_cache import GSheetCache
from xngin.apiserver.settings import SheetRef
from xngin.sheets.config_sheet import ConfigWorksheet, ColumnDescriptor


@pytest.fixture
def mock_session():
    return Mock(spec=Session)


@pytest.fixture
def sheet_cache(mock_session):
    return GSheetCache(mock_session)


@pytest.fixture
def mock_sheet_config():
    return ConfigWorksheet(
        table_name="t",
        columns=[
            ColumnDescriptor(
                column_name="c",
                data_type=DataType.BOOLEAN,
                description="d",
                is_unique_id=True,
                is_strata=False,
                is_filter=False,
                is_metric=True,
                extra={"column_group": "g"},
            )
        ],
    )


def test_get_cached_entry(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")
    cache_key = f"{key.url}!{key.worksheet}"

    # Mock the session.get to return a cached entry
    mock_session.get.return_value = CacheTable(
        key=cache_key, value=mock_sheet_config.model_dump_json()
    )

    fetcher = Mock()  # This shouldn't be called

    result = sheet_cache.get(key, fetcher)

    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_called_once_with(CacheTable, cache_key)
    fetcher.assert_not_called()


def test_get_new_entry(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")
    cache_key = f"{key.url}!{key.worksheet}"

    # Mock the session.get to return None (no cached entry)
    mock_session.get.return_value = None

    fetcher = Mock(return_value=mock_sheet_config)

    result = sheet_cache.get(key, fetcher)

    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_called_once_with(CacheTable, cache_key)
    fetcher.assert_called_once()
    mock_session.add.assert_called_once()
    mock_session.commit.assert_called_once()


def test_get_refresh(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")

    fetcher = Mock(return_value=mock_sheet_config)

    result = sheet_cache.get(key, fetcher, refresh=True)

    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_not_called()
    fetcher.assert_called_once()
    mock_session.add.assert_called_once()
    mock_session.commit.assert_called_once()


def test_get_refresh_with_integrityerror(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")

    fetcher = Mock(return_value=mock_sheet_config)
    # Simulate when the key already exists and triggers an exception:
    mock_session.add.side_effect = IntegrityError(
        statement="SQL", params=None, orig=Exception()
    )

    result = sheet_cache.get(key, fetcher, refresh=True)

    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_not_called()
    fetcher.assert_called_once()
    mock_session.add.assert_called_once()
    mock_session.rollback.assert_called_once()
    mock_session.execute.assert_called_once()
    assert isinstance(mock_session.execute.call_args.args[0], Update)
    mock_session.commit.assert_called_once()


def test_get_cache_and_refresh(mock_sheet_config):
    """Tests the full cycle against a real in-mem db."""
    make_session = conftest.get_test_sessionmaker()
    local_cache = GSheetCache(next(make_session()))

    key = SheetRef(url="https://example.com", worksheet="Sheet1")
    fetcher = Mock(return_value=mock_sheet_config)

    # cache miss
    result = local_cache.get(key, fetcher)
    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    fetcher.assert_called_once()

    # cache hit
    fetcher = Mock(return_value=None)
    result = local_cache.get(key, fetcher)
    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == mock_sheet_config.model_dump()
    fetcher.assert_not_called()

    # Now test an update
    modified_sheet = mock_sheet_config.model_copy(update={"is_strata": True}, deep=True)
    fetcher = Mock(return_value=modified_sheet)
    result = local_cache.get(key, fetcher, refresh=True)
    assert isinstance(result, ConfigWorksheet)
    assert result.model_dump() == modified_sheet.model_dump()
    fetcher.assert_called_once()


@pytest.mark.parametrize(
    "url,worksheet",
    [
        ("https://example.com", "Sheet1"),
        ("https://another.com", "DataSheet"),
    ],
)
def test_cache_key_generation(
    sheet_cache, mock_session, mock_sheet_config, url, worksheet
):
    key = SheetRef(url=url, worksheet=worksheet)
    cache_key = f"{url}!{worksheet}"

    mock_session.get.return_value = None
    fetcher = Mock(return_value=mock_sheet_config)

    sheet_cache.get(key, fetcher)

    mock_session.get.assert_called_once_with(CacheTable, cache_key)
    mock_session.add.assert_called_once()
    added_cache_entry = mock_session.add.call_args[0][0]
    assert added_cache_entry.key == cache_key
