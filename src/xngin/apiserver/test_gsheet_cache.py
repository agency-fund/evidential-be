"""Unit test for gsheet_cache. This was generated by Claude (mostly)."""

import pytest
from unittest.mock import Mock
from sqlalchemy.orm import Session

from xngin.apiserver.api_types import DataType
from xngin.apiserver.database import Cache
from xngin.apiserver.gsheet_cache import GSheetCache
from xngin.apiserver.settings import SheetRef
from xngin.sheets.config_sheet import SheetConfig, RowConfig


@pytest.fixture
def mock_session():
    return Mock(spec=Session)


@pytest.fixture
def sheet_cache(mock_session):
    return GSheetCache(mock_session)


@pytest.fixture
def mock_sheet_config():
    return SheetConfig(
        rows=[
            RowConfig(
                table="t",
                column_name="c",
                data_type=DataType.BOOLEAN,
                column_group="g",
                description="d",
                is_strata=False,
                is_filter=False,
                is_metric=True,
            )
        ]
    )


def test_get_cached_entry(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")
    cache_key = f"{key.url}!{key.worksheet}"

    # Mock the session.get to return a cached entry
    mock_session.get.return_value = Cache(
        key=cache_key, value=mock_sheet_config.model_dump_json()
    )

    fetcher = Mock()  # This shouldn't be called

    result = sheet_cache.get(key, fetcher)

    assert isinstance(result, SheetConfig)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_called_once_with(Cache, cache_key)
    fetcher.assert_not_called()


def test_get_new_entry(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")
    cache_key = f"{key.url}!{key.worksheet}"

    # Mock the session.get to return None (no cached entry)
    mock_session.get.return_value = None

    fetcher = Mock(return_value=mock_sheet_config)

    result = sheet_cache.get(key, fetcher)

    assert isinstance(result, SheetConfig)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_called_once_with(Cache, cache_key)
    fetcher.assert_called_once()
    mock_session.add.assert_called_once()
    mock_session.commit.assert_called_once()


def test_get_refresh(sheet_cache, mock_session, mock_sheet_config):
    key = SheetRef(url="https://example.com", worksheet="Sheet1")

    fetcher = Mock(return_value=mock_sheet_config)

    result = sheet_cache.get(key, fetcher, refresh=True)

    assert isinstance(result, SheetConfig)
    assert result.model_dump() == mock_sheet_config.model_dump()
    mock_session.get.assert_not_called()
    fetcher.assert_called_once()
    mock_session.add.assert_called_once()
    mock_session.commit.assert_called_once()


@pytest.mark.parametrize(
    "url,worksheet",
    [
        ("https://example.com", "Sheet1"),
        ("https://another.com", "DataSheet"),
    ],
)
def test_cache_key_generation(
    sheet_cache, mock_session, mock_sheet_config, url, worksheet
):
    key = SheetRef(url=url, worksheet=worksheet)
    cache_key = f"{url}!{worksheet}"

    mock_session.get.return_value = None
    fetcher = Mock(return_value=mock_sheet_config)

    sheet_cache.get(key, fetcher)

    mock_session.get.assert_called_once_with(Cache, cache_key)
    mock_session.add.assert_called_once()
    added_cache_entry = mock_session.add.call_args[0][0]
    assert added_cache_entry.key == cache_key
