[project]
name = "xngin"
version = "0.0.1"
dependencies = [
    "atlas-provider-sqlalchemy==0.4.0,<0.5",  # 0.4.1 adds heavy clickhouse dependency
    "boto3>=1.35",
    "cachetools>=5.5.2",
    "deepdiff>=8.5,<9",
    "dnspython>=2.7.0",
    "email-validator>=2.2.0",
    "fastapi[standard]>=0.120.0,<0.121",
    "google-cloud-kms>=3.7.0,<4",
    "httpx>=0.28.1,<0.29.0",
    "loguru>=0.7.3,<0.8.0",
    "numpy>=1.26.4,<1.27",
    "pandas-gbq>=0.29.0,<0.30",
    "pandas>=2.3.3,<3",
    "parsy>=2.1,<3",
    "psycopg2-binary>=2.9.10,<3; sys_platform == 'darwin'",
    "psycopg2>=2.9.10,<3; sys_platform == 'linux'",
    "psycopg[binary]>=3.2.10,<4",
    "pydantic>=2.12.3,<3.0.0",
    "pynacl>=1.6.0",
    "python-jose>=3.4.0,<3.5",
    "python-jsonpath>=2.0.1",
    "scipy>=1.12.0,<2",
    "sentry-sdk[fastapi,loguru,sqlalchemy]>=2.42.1,<3",
    "sqlalchemy-bigquery>=1.12.0,<2",
    "sqlalchemy[asyncio]>=2.0.44",
    "statsmodels>=0.14.5,<0.20",
    "stochatreat>=0.1.0,<0.2.0",
    "typer>=0.20.0,<0.21.0",
    "uvicorn[standard]>=0.38.0",
    "zstandard>=0.25.0,<0.26",  # built-in to 3.14
]
requires-python = ">=3.12,<3.14"

[dependency-groups]
ide = [
    "pynvim>=0.4.0,<0.5.0", # temporarily removed due to heavy dependencies not yet compatible with 3.14
]
dev = [
    "boto3-stubs>=1.39.1",
    "coverage>=7.11.0",
    "mypy>=1.18.1",
    "pandas-stubs>=2.3.2",
    "pre-commit>=4.0.1,<4.1.0",
    "pytest-asyncio>=1.2.0",
    "pytest-env>=1.1.5,<1.2",
    "pytest-mock>=3.15.1,<4",
    "pytest>=8.4.2,<9.0.0",
    "ruff>=0.14.2,<0.15.0",
    "scipy-stubs>=1.16.2,<2",
    "types-cachetools>=6.0.0.20250525",
    "types-psycopg2>=2.9.10,<3",
    "types-python-jose>=3.5.0.20250531",
]

[build-system]
requires = ["uv_build>=0.9.4,<0.10.0"]
build-backend = "uv_build"

[project.scripts]
xngin-apiserver = "xngin.apiserver.main:main"
xngin-cli = "xngin.cli.main:app"
xngin-snapshotter = "xngin.apiserver.snapshots.cli:app"
xngin-tq = "xngin.tq.cli:app"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"  # https://pytest-asyncio.readthedocs.io/en/latest/reference/configuration.html
log_cli = 0  # set to 1 for live logs
log_cli_level = "warn"
markers = [
    "integration: integration tests that rely on remote resources",
    "xurl: tests that use xurl scripts and can be updated with UPDATE_API_TESTS"
]
addopts = "-m 'not integration'"
# filtewarnings can be used to silence warnings during tests.
# format is: action:message:category:module
filterwarnings = [
    # Workaround for a bug in FastAPI's OpenAPI schema generation.
    "ignore:`example` has been deprecated:DeprecationWarning:xngin.apiserver.dependencies",
    # Performance optimization warning caused by: reflect(dbengine()).
    "ignore:.+unnest will not make use of SQL compilation caching:sqlalchemy.exc.SAWarning:"
]
env = [
    "SENTRY_DSN="  # Disable Sentry in unit tests.
]

[tool.ruff]
line-length = 120
preview = true
exclude = ["*.ipynb", "tmp/**"]

[tool.ruff.lint]
# Rules: https://docs.astral.sh/ruff/rules/
select = [
    "A",
    "ASYNC",
    "B",
    "E",
    "F",
    "FAST",
    "FURB",
    "I",
    "ICN",
    "N",
    "NPY",
    "PD",
    "PLC",
    "PIE",
    "PLE",
    "PLR",
    "PLW1508",
    "PT",
    "PYI",
    "RET",
    "RUF",
    "SIM",
    "TRY",
    "UP",
    "W",
]
ignore = [
    "E266", # Too many leading `#` before block comment
    "FURB101", # `open` and `read` should be replaced by `Path(file).read_text()`
    "FURB103", # `open` and `write` should be replaced by `Path(filename)....`
    "FURB140", # Use `itertools.starmap` instead of the generator
    "FURB152", # replace values that resemble mathemematical constants with constants (e.g. 3.14 => math.pi)
    "PD002", # `inplace=True` should be avoided; it has inconsistent behavior
    "PD003", # `.isna` is preferred to `.isnull`; functionality is equivalent"
    "PD101", # Using `series.nunique()` for checking that a series is constant is inefficient
    "PD901", # Avoid using the generic variable name `df` for DataFrames
    "PIE808", # Unnecessary `start` argument in `range`
    "PLC1901", # x == "" can be simplified to not x
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many positional arguments
    "PLR0914", # too many local variables
    "PLR0915", # too many statements
    "PLR0917", # too many positional arguments
    "PLR1702", # too many nested blocks
    "PLR2004", # magic value,
    "PLR6301", # method could be a function, class method, or static method
    "PT006", # Wrong type passed to first argument of `pytest.mark.parametrize`; expected `tuple`
    "PT011", # pytest.raises(_) is too broad, set the `match` parameter or use a more specific exception
    "PT018", # Assertion should be broken down into multiple parts
    "PYI041", # Use `float` instead of `int | float`
    "SIM108", # Use ternary operator instead of `if`-`else`-block
    "RUF029",
    "TRY003",
]

[tool.ruff.lint.flake8-import-conventions]
# https://docs.astral.sh/ruff/settings/#lintflake8-import-conventions
banned-from = [
    "xngin.apiserver.sqla.tables",
    "xngin.apiserver.routers.admin.authz"
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# https://docs.astral.sh/ruff/settings/#lint_flake8-import-conventions_extend-aliases
"xngin.apiserver.routers.admin.admin_api_types" = "aapi"
"xngin.apiserver.routers.common_api_types" = "capi"

[tool.uv]
required-version = ">=0.9.4,<0.10.0"
environments = [
    "sys_platform == 'darwin'",
    "sys_platform == 'linux'",
]

[tool.mypy]
python_version = 3.12
mypy_path = "src"
namespace_packages = true
enable_error_code = [
    "exhaustive-match",
    "override",
    "redundant-cast",
    "redundant-expr",
    "truthy-bool",
    "truthy-iterable",
    "unused-awaitable",
]
explicit_package_bases = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
disallow_untyped_defs = false
plugins = ['pydantic.mypy']

[[tool.mypy.overrides]]
module = ["deepdiff", "parsy", "statsmodels.*", "patsy.*", "sqlalchemy_bigquery.*", "pandas_gbq.*"]
ignore_missing_imports = true

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
format = "markdown"
skip_covered = true
skip_empty = true
