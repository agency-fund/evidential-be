version: '3'
output: prefixed
vars:
  # App database for the local dev environment (see tasks: start, apply-migrations)
  XNGIN_DEVAPPDB_NAME: "xngin"
  XNGIN_DEVAPP_DSN: "postgresql://postgres:postgres@localhost:5499/{{.XNGIN_DEVAPPDB_NAME}}?sslmode=disable"

env:
  # Disable Atlas telemetry.
  ATLAS_NO_ANON_TELEMETRY: "true"
  DO_NOT_TRACK: "1"

  # Allow connecting to data warehouses residing in private IP ranges.
  ALLOW_CONNECTING_TO_PRIVATE_IPS: "1"

  # Google will redirect to this URL upon successful authentication. This URL is served by the frontend application
  # and the GoogleAuthProvider component will intercept the query arguments and handle them.
  GOOGLE_OIDC_REDIRECT_URI: "http://localhost:3000/"

  # These values are configured in the xngin-development-dc project and should be used in development environments:
  # https://console.cloud.google.com/apis/credentials?organizationId=256829878972&project=xngin-development-dc.
  GOOGLE_OIDC_CLIENT_ID: "222213100775-qa1ajcrk48il70itcbdcvgr9ib5t08uf.apps.googleusercontent.com"

  # These values are configured in the evidential-live project and should only be used when validating the
  # production environments:
  # https://console.cloud.google.com/auth/clients?project=evidential-live
  #GOOGLE_OIDC_CLIENT_ID: "314428509782-j8fgiq5dvoic01432s2bcu3isinc9kam.apps.googleusercontent.com"
  #GOOGLE_OIDC_REDIRECT_URI: "http://localhost:3000/"

  # These are values used in the xngin.railway.settings.json and are present for when testing the Railway configs.
  # (optional)
  DWH_PGHOST: "127.0.0.1"
  DWH_PGPASSWORD: "pgpass"
  DWH_PGPORT: "5632"
  DWH_PGUSER: "pguser"
  CUSTOMER_API_TOKEN: ""
  CUSTOMER_DWH_PASSWORD: ""

  # Configure SQLAlchemy to log the generated SQL statements used on customer DWH via its own logger.
  ECHO_SQL: "false"

  # Configure SQLAlchemy to log the generated SQL statements used on xngin app database via its own logger.
  ECHO_SQL_APPDB: "false"

  # Use a concise log line formatter for improved readability in the terminal.
  FRIENDLY_DEV_LOGGING: "true"

  # Set DEBUG_LOGGING to true to display detailed information about logging configuration to stdout. Only set this to
  # true if you are debugging issues with logs.
  DEBUG_LOGGING: "false"

  # Configure customlogging.py to log dwh SQL to the custom log.
  LOG_SQL: "true"

  # Configure customlogging.py to log app SQL to the custom log.
  LOG_SQL_APPDB: "false"

  # Publish the OpenAPI spec for the admin and OIDC APIs
  XNGIN_PUBLISH_ALL_DOCS: "true"

  # Generally useful settings.
  XNGIN_SETTINGS: "src/xngin/apiserver/testdata/xngin.testing.settings.json"
  XNGIN_DEBUG: "true"

  # Data warehouse available for use by the local dev environment (see task bootstrap-dwh) and also referenced
  # by unit tests via xngin.testing.settings.json. It is bootstrapped with the testing datawarehouse when
  # `task start-with-local-pg` is used.
  XNGIN_DEVDWH_NAME: "dwh"
  XNGIN_DEVDWH_DSN: "postgresql://postgres:postgres@localhost:5499/dwh?sslmode=disable"

  # Datasource for tests of the xngin app database that use the xngin_db_session dependency.
  XNGIN_TEST_APPDB_URI: "postgresql://postgres:postgres@localhost:5499/test_xngin?sslmode=disable"

  # Datasource for the tests using the xngin.apiserver.dwh.test_queries.fixture_dwh_session fixture. The database name
  # is ignored because test_queries creates a random database name for each test (see fixture_dwh_session).
  XNGIN_TEST_DWH_URI: "postgresql://postgres:postgres@localhost:5499/test_dwh?sslmode=disable"

  # XNGIN_PUBLIC_HOSTNAME defines the base hostname (and optional port) we use when constructing URLs to send to
  # external systems (such as via outbound webhooks).
  XNGIN_PUBLIC_PROTOCOL: "http"
  XNGIN_PUBLIC_HOSTNAME: "localhost:8000"
tasks:
  bootstrap-app:
    desc: >-
      Ensure the localpg server is running and has an "xngin" database. If the database doesn't already exist, it will
      be created, and Atlas will create the tables so that subsequent table migrations behave as expected.
    cmds:
      - >
        ./tools/localpg.py --allow-existing -d --wait --create-db {{.XNGIN_DEVAPPDB_NAME}}
        --if-created "uv run task apply-migrations"
  start:
    desc: "Starts apiserver locally with settings compatible with local dash dev server (using PostgreSQL)"
    interactive: true
    dotenv:
      # Populate BQ_SERVICE_ACCOUNT (optional) and GOOGLE_OIDC_CLIENT_SECRET (optional).
      - .env
    env:
      XNGIN_DB: "{{.XNGIN_DEVAPP_DSN}}"

      # Admin API settings. These need to be set for interaction with the dash web UI.
      # Also see instructions for .env above.
      ENABLE_ADMIN: "true"
      ENABLE_OIDC: "true"
    deps:
      - bootstrap-app
      - bootstrap-dwh
    cmds:
      - uv run fastapi dev src/xngin/apiserver/main.py
  bootstrap-dwh:
    desc: "Loads a sample data warehouse into the localpg server."
    interactive: true
    cmds:
      - uv run xngin-cli create-testing-dwh --dsn "$XNGIN_DEVDWH_DSN" --allow-existing --create-db
  test:
    desc: "Runs unit tests"
    interactive: true
    env:
      # Tests should never connect to this URL.
      DATABASE_URL: "postgres://fail:fail@127.0.0.1:5499/fail"
    deps:
      - bootstrap-dwh
    cmds:
      - uv run pytest
  test-integration:
    desc: "Runs Google integration tests."
    interactive: true
    internal: true
    cmds:
      - uv run pytest -m integration
  update-api-tests:
    desc: "Run the API tests and update the expected responses."
    interactive: true
    env:
      UPDATE_API_TESTS: "1"
    cmd: uv run pytest src/xngin/apiserver/test_api.py
  make-migrations:
    desc: "Build Postgres migrations"
    cmd: |
      uv run atlas migrate diff --env sa_postgres && git add migrations
      echo ðŸ’¡ If you modify the migration file afterwards, you should re-hash it: task hash-migrations
  hash-migrations:
    desc: "Rehash your migration file (see atlas.sum) if you had to modify the generated migration file afterwards, e.g. to add a custom backfill."
    cmds:
      - uv run atlas migrate hash --env sa_postgres
  migration-reset:
    desc: "Drop the local development database's schema, tables, and Atlas migration state. Use this when your local database is out of sync with merged migrations."
    cmds:
      - uv run atlas schema clean --env sa_postgres --url '{{.XNGIN_DEVAPP_DSN}}'
      - psql "{{.XNGIN_DEVAPP_DSN}}" -c 'CREATE SCHEMA public;'
      - task: apply-migrations-pg
  migration-status:
    desc: "Provides in-depth information about the migration status of the connected database. Useful for debugging migration issues."
    cmds:
      - uv run atlas migrate status --env sa_postgres --url '{{.XNGIN_DEVAPP_DSN}}'
  make-manual-migration:
    desc: "Create and edit a new migration file manually. Use this to manually adjust values in the database."
    interactive: true
    cmds:
      - uv run atlas migrate new --env sa_postgres --edit
  down-migration:
    desc: "Go back a version in the migration history. Note that it include pre-migration checks to ensure data isn't deleted and tables are empty, so you may have to manually do some prep for the reversion. See https://atlasgo.io/versioned/down"
    cmds:
      - uv run atlas migrate down --env sa_postgres --url '{{.XNGIN_DEVAPP_DSN}}'
  apply-migrations:
    desc: "Apply Postgres migrations locally (requires localpg instance to be running, to have an xngin database, and to have been previously migrated)"
    cmds:
      - uv run atlas migrate diff --env sa_postgres
      - uv run atlas migrate apply --env sa_postgres --url '{{.XNGIN_DEVAPP_DSN}}'
  create-user:
    desc: "Create a user: task create-user -- username@example.com"
    interactive: true
    deps:
      - bootstrap-app
    env:
      XNGIN_DEVAPP_DSN: "{{.XNGIN_DEVAPP_DSN}}"
    cmd: |
      if [ "{{.CLI_ARGS}}" == "" ]; then
        echo Email address must be passed as argument after "--". Example: task create-user -- email@example.com
        exit 1
      fi
      uv run xngin-cli add-user --email "{{.CLI_ARGS}}" --privileged
  start-tq:
    desc: "Start the task queue."
    env:
      DATABASE_URL: "{{.XNGIN_DEVAPP_DSN}}"
    cmd: uv run xngin-tq
  psql:
    desc: "Start interactive psql"
    interactive: true
    cmd: psql "{{.XNGIN_DEVAPP_DSN}}"
